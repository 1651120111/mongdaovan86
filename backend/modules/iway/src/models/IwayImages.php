<?php

namespace modava\iway\models;

use common\models\User;
use modava\iway\models\table\IwayImagesTable;
use yii\behaviors\AttributeBehavior;
use yii\db\ActiveRecord;
use Yii;
use yii\web\UploadedFile;

class IwayImages extends IwayImagesTable
{
    const SCENARIO_SAVE = 'save';

    public $toastr_key = 'iway-images';
    public $fileImage;
    public $fileImageBase64;

    public $uploadSuccess = [];

    public function behaviors()
    {
        return array_merge(
            parent::behaviors(),
            [
                [
                    'class' => AttributeBehavior::class,
                    'attributes' => [
                        ActiveRecord::EVENT_BEFORE_INSERT => ['created_at']
                    ],
                    'value' => time()
                ],
                [
                    'class' => AttributeBehavior::class,
                    'attributes' => [
                        ActiveRecord::EVENT_BEFORE_UPDATE => ['evaluate_at']
                    ],
                    'value' => function () {
                        if (is_array($this->_old_attributes) &&
                            array_key_exists('evaluate', $this->_old_attributes) &&
                            $this->_old_attributes['evaluate'] != $this->evaluate) return time();
                        return $this->evaluate_at;
                    }
                ],
                [
                    'class' => AttributeBehavior::class,
                    'attributes' => [
                        ActiveRecord::EVENT_BEFORE_UPDATE => ['evaluate_by']
                    ],
                    'value' => function () {
                        if (is_array($this->_old_attributes) &&
                            array_key_exists('evaluate', $this->_old_attributes) &&
                            $this->_old_attributes['evaluate'] != $this->evaluate) return Yii::$app->user->id;
                        return $this->evaluate_by;
                    }
                ],
                [
                    'class' => AttributeBehavior::class,
                    'attributes' => [
                        ActiveRecord::EVENT_BEFORE_VALIDATE => 'fileImage'
                    ],
                    'value' => function () {
                        return UploadedFile::getInstances($this, 'fileImage');
                    }
                ],
            ]
        );
    }

    public function beforeSave($insert)
    {
        if ($this->primaryKey == null) {
            if (!$this->uploadImage()) return false;
            $this->image = is_array($this->uploadSuccess) && count($this->uploadSuccess) > 0 ? $this->uploadSuccess[0] : null;
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function save($runValidation = true, $attributeNames = null)
    {
        $save = parent::save($runValidation, $attributeNames); // TODO: Change the autogenerated stub
        if ($save == false) {
            $this->deleteImage();
        }
        return $save;
    }

    public function afterSave($insert, $changedAttributes)
    {
        /*$tray = IwayTray::findOne(['id' => $this->trayHasOne->id]);
        if ($this->trayHasOne->countImagesSuccess == count(self::TYPE)) {
            $data = [
                'result' => IwayTray::DAT,
                'date_result' => time(),
                'user_result' => Yii::$app->user->id
            ];
        } else if ($this->trayHasOne->countImagesReject > 0) {
            $data = [
                'result' => IwayTray::CHUA_DAT,
                'date_result' => time(),
                'user_result' => Yii::$app->user->id
            ];
        } else {
            $data = [
                'result' => IwayTray::CHUA_DANH_GIA,
                'date_result' => null,
                'user_result' => null,
            ];
        }
        $tray->updateAttributes($data);*/
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['fileImage'], 'required', 'on' => [self::SCENARIO_SAVE], 'when' => function () {
                return $this->primaryKey == null && $this->fileImageBase64 == null;
            }],
            [['fileImageBase64'], 'required', 'on' => [self::SCENARIO_SAVE], 'when' => function () {
                return $this->primaryKey == null && $this->fileImage == null;
            }],
//            [['parent_table', 'parent_id'], 'required'],
            [['parent_id', 'type', 'status'], 'integer'],
            [['parent_table'], 'string', 'max' => 255],
            [['evaluate'], 'string'],
            ['fileImage', 'each', 'rule' => ['file', 'extensions' => ['png', 'jpg', 'jpeg'], 'wrongExtension' => 'Chỉ chấp nhận định dạng: {extensions}']],
//            [['type'], 'in', 'range' => array_keys(self::TYPE)],
            [['status'], 'checkStatus']
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('backend', 'ID'),
            'parent_table' => Yii::t('backend', 'Parent table'),
            'parent_id' => Yii::t('backend', 'Parent ID'),
            'image' => Yii::t('backend', 'Image'),
            'type' => Yii::t('backend', 'Type'),
            'status' => Yii::t('backend', 'Status'),
            'created_at' => Yii::t('backend', 'Created At'),
            'evaluate' => Yii::t('backend', 'Evaluate'),
            'evaluate_at' => Yii::t('backend', 'Evaluate At'),
            'evaluate_by' => Yii::t('backend', 'Evaluate By'),
        ];
    }

    public function checkStatus()
    {
        if (!$this->hasErrors()) {
            $user = new User();
            $roleName = $user->getRoleName(Yii::$app->user->id);
            if ($roleName != User::DEV && $this->status != self::DAT && $this->trayHasOne != null && $this->trayHasOne->result == IwayTray::DAT) {
                $this->addError('status', 'Hình ảnh đã đánh giá đạt, không thể chỉnh sửa trạng thái');
            }
        }
    }

    private function uploadImage()
    {
        if (!$this->hasErrors()) {
            if ($this->fileImage != null) {
                return $this->uploadImageFormFile();
            } else if ($this->fileImageBase64 != null) {
                return $this->uploadImageFormBase64();
            }
        }
    }

    private function uploadImageFormFile()
    {
        /* @var $image UploadedFile */
        $images = $this->fileImage;
        if ($images !== null) {
            if (!is_array($images)) $images = [$images];
            foreach ($images as $image) {
                $imageName = $image->baseName . '-' . time() . '.' . $image->extension;
                $pathImage = static::$pathUpload . $imageName;
                if (!$image->saveAs($pathImage)) {
                    $this->addError('image', 'Upload hình thất bại');
                    return false;
                }
                $this->uploadSuccess[] = $imageName;
            }
            return true;
        } else {
            $this->addError('image', 'Không có dữ liệu hình ảnh');
            return false;
        }
    }

    private function base64_to_jpeg($base64_string, $output_file)
    {
        try {
            $ifp = fopen($output_file, 'wb');
            $data = explode(',', $base64_string);
            fwrite($ifp, base64_decode($data[1]));
            fclose($ifp);
            return $output_file;
        } catch (\Exception $ex) {
            return false;
        }
    }

    private function uploadImageFormBase64()
    {
        $images = $this->fileImageBase64;
        if ($images !== null) {
            if (!is_array($images)) $images = [$images];
            foreach ($images as $image) {
                $imageName = 'tray-image-' . $this->type . '-' . time() . '.jpg';
                $pathImage = $this->pathUpload . $imageName;
                if (!$this->base64_to_jpeg($image, $pathImage)) {
                    $this->addError('image', 'Upload hình thất bại');
                    return false;
                }
                $this->uploadSuccess[] = $imageName;
            }
            return true;
        } else {
            $this->addError('image', 'Không có dữ liệu hình ảnh');
            return false;
        }
    }

    private function deleteImage()
    {
        if ($this->uploadSuccess != null) {
            if (!is_array($this->uploadSuccess)) $this->uploadSuccess = [];
            foreach ($this->uploadSuccess as $uploadSuccess) {
                if (!is_dir($this->pathUpload . $uploadSuccess) && file_exists($this->pathUpload . $uploadSuccess)) {
                    @unlink($this->pathUpload . $uploadSuccess);
                }
            }
        }
    }
}
