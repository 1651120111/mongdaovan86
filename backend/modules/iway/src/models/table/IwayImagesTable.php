<?php

namespace modava\iway\models\table;

use cheatsheet\Time;
use modava\auth\models\User;
use modava\iway\models\IwayTray;
use modava\iway\models\query\IwayTrayImagesQuery;
use Yii;
use yii\db\ActiveRecord;

/**
 * This is the model class for table "iway_tray_images".
 *
 * @property int $id
 * @property int $parent_table Parent table
 * @property int $parent_id Parent ID
 * @property string $image Hình ảnh tray
 * @property int $type Loại hình ảnh: chụp thẳng, chụp trái, chụp phải,...
 * @property int $status Trạng thái đánh giá: 0 - chưa đánh giá, 1 - đạt, 2 - chưa đạt
 * @property int $created_at Thời gian chụp
 * @property string $evaluate Đánh giá của bác sĩ
 * @property int $evaluate_at Thời gian đánh giá
 * @property int $evaluate_by Bác sĩ đánh giá
 */
class IwayImagesTable extends \yii\db\ActiveRecord
{
    const CHUA_DANH_GIA = 0;
    const CHUA_DAT = 1;
    const DAT = 2;
    const STATUS = [
        self::CHUA_DANH_GIA => 'Chưa đánh giá',
        self::CHUA_DAT => 'Chưa đạt',
        self::DAT => 'Đạt',
    ];

    const THANG_CAN_CHAT_KHONG_DEO_TRAY = 0;
    const TRAI_CAN_CHAT_KHONG_DEO_TRAY = 1;
    const PHAI_CAN_CHAT_KHONG_DEO_TRAY = 2;
    const THANG_HO_KHONG_DEO_TRAY = 3;
    const TRAI_HO_KHONG_DEO_TRAY = 4;
    const PHAI_HO_KHONG_DEO_TRAY = 5;
    const THANG_HO_DEO_TRAY = 6;
    const TRAI_HO_DEO_TRAY = 7;
    const PHAI_HO_DEO_TRAY = 8;
    const TYPE = [
        self::THANG_CAN_CHAT_KHONG_DEO_TRAY => 'Không đeo tray - Thẳng cắn chặt',
        self::TRAI_CAN_CHAT_KHONG_DEO_TRAY => 'Không đeo tray - Trái cắn chặt',
        self::PHAI_CAN_CHAT_KHONG_DEO_TRAY => 'Không đeo tray - Phải cắn chặt',
        self::THANG_HO_KHONG_DEO_TRAY => 'Không đeo tray - Thẳng hở',
        self::TRAI_HO_KHONG_DEO_TRAY => 'Không đeo tray - Trái hở',
        self::PHAI_HO_KHONG_DEO_TRAY => 'Không đeo tray - Phải hở',
        self::THANG_HO_DEO_TRAY => 'Đeo tray - Thẳng hở',
        self::TRAI_HO_DEO_TRAY => 'Đeo tray - Trái hở',
        self::PHAI_HO_DEO_TRAY => 'Đeo tray - Phải hở',
    ];

    public static $pathUpload;

    public $_old_attributes;

    public function __construct($config = [])
    {
        parent::__construct($config);
    }

    public static function setPathUpload($path = null)
    {
        if ($path == null) $path = Yii::getAlias('@backend/web') . '/uploads/';
        if (substr($path, 0, 1) != '/') $path = '/' . $path;
        if (substr($path, -1) != '/') $path .= '/';
        static::$pathUpload = $path;
        if (!is_dir(static::$pathUpload)) @mkdir(static::$pathUpload, 0775, true);
    }

    public function afterFind()
    {
        $this->_old_attributes = $this->getOldAttributes();
        parent::afterFind(); // TODO: Change the autogenerated stub
    }

    public static function tableName()
    {
        return 'iway_images';
    }

    public static function find()
    {
        return new IwayTrayImagesQuery(get_called_class());
    }

    public function afterDelete()
    {
        $cache = Yii::$app->cache;
        $keys = [];
        foreach ($keys as $key) {
            $cache->delete($key);
        }
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }

    public function afterSave($insert, $changedAttributes)
    {
        $cache = Yii::$app->cache;
        $keys = [];
        foreach ($keys as $key) {
            $cache->delete($key);
        }
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    public function getPrevImages()
    {
        return self::find()
            ->where([
                self::tableName() . '.parent_table' => $this->parent_table,
                self::tableName() . '.parent_id' => $this->parent_id,
                self::tableName() . '.type' => $this->type
            ])
            ->andWhere(['<>', 'id', $this->primaryKey])
            ->orderBy([self::tableName() . '.created_at' => SORT_DESC])
            ->offset(0)
            ->limit(1)
            ->one();
    }

    public function getTrayHasOne()
    {
        return $this->hasOne(IwayTray::class, ['id' => 'parent_id']);
    }

    public function getUserEvaluateHasOne()
    {
        return $this->hasOne(User::class, ['id' => 'evaluate_by']);
    }

    public static function getPathUploadByParentTable($parent_table = null)
    {
        $params = Yii::$app->params;
        switch ($parent_table) {
            case 'iway_tray':
                return array_key_exists('iway-tray-image', $params) ? Yii::getAlias('@backend/web') . $params['iway-tray-image']['path']['folder'] : null;
            default:
                return null;
        }
    }

    public function getModelParent($parent_table = null)
    {
        if ($parent_table == null) $parent_table = $this->parent_table;
        switch ($parent_table) {
            case 'iway_tray':
                return IwayTray::class;
            default:
                return null;
        }
    }

    public function getParentName()
    {
        switch ($this->parent_table) {
            case 'iway_tray':
                return 'Khay';
            default:
                return null;
        }
    }

    public function getImage($pathUpload = null)
    {
        if ($pathUpload == null) $pathUpload = self::$pathUpload ?: self::getPathUploadByParentTable($this->parent_table);
        if ($this->image != null && !is_dir($pathUpload . $this->image) && file_exists($pathUpload . $this->image)) {
            return Yii::$app->assetManager->publish($pathUpload . $this->image)[1];
        }
        return null;
    }
}
