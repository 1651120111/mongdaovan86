<?php


namespace backend\components;

use backend\models\CustomerElastic;
use modava\log\models\Logs;
use yii\db\ActiveRecord;
use yii\elasticsearch\Connection;
use yii\elasticsearch\Exception;

class MyModel extends ActiveRecord
{
    public $_old_attributes;

    public function afterFind()
    {
        $this->_old_attributes = static::getOldAttributes();
        parent::afterFind(); // TODO: Change the autogenerated stub
    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes);
        $command = $this->connect();

        if ($command !== false) {
            $primaryKey = $this->primaryKey;
            $attributes = $this->attributes;
            $tableName = CustomerElastic::NAME_INDEX;
            $tableType = CustomerElastic::NAME_TYPE;
            $command->flushIndex($tableName);
            try {
                if ($command->exists($tableName, $tableType, $primaryKey)) {
                    $command->update($tableName, $tableType, $primaryKey, $attributes);
                } else {
                    $command->insert($tableName, $tableType, $attributes, $primaryKey);
                    $command->update($tableName, $tableType, $primaryKey, $attributes);
                }
                $command->flushIndex($tableName);

//                if ($customer = CustomerElastic::get($primaryKey) !== null) {
//                    $customer = CustomerElastic::findOne($primaryKey);
//                    $customer->setAttributes($attributes, false);
//                    $customer->update(false);
//                } else {
//                    // word
//                    $customer = new CustomerElastic();
//                    $customer->primaryKey = $primaryKey;
//                    $customer->setAttributes($attributes, false);
//                    $customer->insert(false);
//                }
                /**
                 * can be overridden to do things after save()
                 */
            } catch (Exception $ex) {

            }

        }

        $attributes = static::getAttributes();
        $_old_attributes = $this->_old_attributes;
        $_attributes = $attributes;
        if (static::hasAttribute('updated_at')) {
            unset($_old_attributes['updated_at']);
            unset($_attributes['updated_at']);
        }
        if ($_old_attributes != $_attributes) {
            $action = $insert ? Logs::ACTION_CREATE : Logs::ACTION_UPDATE;
            Logs::quickCreate(static::tableName(), $action, $attributes);
        }

    }

    protected function connect()
    {
        try {
            $connection = new Connection();
            $connection->open();
            $command = $connection->createCommand();
        } catch (Exception $e) {
            return false;
        }
        return $command;

    }

    public function afterDelete()
    {
        $command = $this->connect();
        if ($command !== false) {
            $primaryKey = $this->primaryKey;
            $tableName = CustomerElastic::NAME_INDEX;
            $tableType = CustomerElastic::NAME_TYPE;
            try {
                $command->delete($tableName, $tableType, $primaryKey);
                $command->flushIndex($tableName);
                // loi ko dung dc
//                $customer = CustomerElastic::findOne($primaryKey);
//                $customer->delete();
            } catch (Exception $ex) {
            }
        }
        parent::afterDelete(); // TODO: Change the autogenerated stub
        Logs::quickCreate(static::tableName(), Logs::ACTION_DELETE, static::getAttributes());
    }
}
